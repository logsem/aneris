(* This file is automatically generated from the OCaml source file
<repository_root>/ml_sources/examples/reliable_communication/lib/sharding/sharding_code.ml *)

From aneris.aneris_lang Require Import ast.
From aneris.aneris_lang.lib Require Import map_code.
From aneris.aneris_lang.lib.serialization Require Import serialization_code.
From aneris.examples.reliable_communication.lib.mt_server Require Import mt_server_code.
From aneris.aneris_lang.lib Require Import list_code.

(**  Serializers * *)

Definition write_serializer key_ser val_ser :=
  prod_serializer key_ser val_ser.

Definition req_ser key_ser val_ser :=
  sum_serializer (write_serializer key_ser val_ser) key_ser.

Definition rep_ser val_ser :=
  sum_serializer unit_serializer (option_serializer val_ser).

Definition client_request_handler_at_server : val :=
  λ: "data" "hash" "req",
  let: "k" := match: "req" with
    InjL "p" => Fst "p"
  | InjR "k" => "k"
  end in
  let: "i" := "hash" "k" in
  let: "p" := match: list_nth "data" "i" with
    SOME "p" => "p"
  | NONE => assert: #false
  end in
  let: "rpc" := Fst "p" in
  let: "lk" := Snd "p" in
  acquire "lk";;
  let: "res" := make_request "rpc" "req" in
  release "lk";;
  "res".

Definition start_server key_ser val_ser : val :=
  λ: "addr" "data" "hash" <>,
  run_server (rep_ser val_ser) (req_ser key_ser val_ser) "addr"
  (λ: "req", client_request_handler_at_server "data" "hash" "req").

Definition server_request_handler_at_shard : val :=
  λ: "db" "lk" "req",
  acquire "lk";;
  let: "res" := match: "req" with
    InjL "p" =>
    let: "k" := Fst "p" in
    let: "v" := Snd "p" in
    "db" <- (map_insert "k" "v" ! "db");;
    InjL #()
  | InjR "k" => InjR (map_lookup "k" ! "db")
  end in
  release "lk";;
  "res".

Definition start_shard key_ser val_ser : val :=
  λ: "addr" "db" "lk" <>,
  run_server (rep_ser val_ser) (req_ser key_ser val_ser) "addr"
  (λ: "req", server_request_handler_at_shard "db" "lk" "req").

Definition init_server key_ser val_ser : val :=
  λ: "srv_addr" "addrs" "hash",
  let: "data" := list_map (λ: "p",
                           let: "srv" := Fst "p" in
                           let: "shard" := Snd "p" in
                           let: "rpc" := init_client_proxy (req_ser key_ser
                                                            val_ser)
                                         (rep_ser val_ser) "srv" "shard" in
                           let: "lk" := newlock #() in
                           ("rpc", "lk"))
                 "addrs" in
  Fork (start_server key_ser val_ser "srv_addr" "data" "hash" #()).

Definition init_shard key_ser val_ser : val :=
  λ: "addr",
  let: "db" := ref (map_empty #()) in
  let: "lk" := newlock #() in
  Fork (start_shard key_ser val_ser "addr" "db" "lk" #()).

Definition init_client key_ser val_ser : val :=
  λ: "clt_addr" "srv_addr",
  let: "rpc" := init_client_proxy (req_ser key_ser val_ser) (rep_ser val_ser)
                "clt_addr" "srv_addr" in
  let: "lk" := newlock #() in
  let: "request" := λ: "req",
  acquire "lk";;
  let: "res" := make_request "rpc" "req" in
  release "lk";;
  "res" in
  let: "write" := λ: "k" "w",
  match: "request" (InjL ("k", "w")) with
    InjL "_u" => #()
  | InjR "_abs" => assert: #false
  end in
  let: "read" := λ: "k",
  match: "request" (InjR "k") with
    InjL "_abs" => assert: #false
  | InjR "v" => "v"
  end in
  ("write", "read").
