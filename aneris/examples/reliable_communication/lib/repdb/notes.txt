
(* -------------------------------------------------------------------------- *)
(** What are guarantees we want to show in the specs ? *)
(* -------------------------------------------------------------------------- *)

Obs(a, h) is necessary.


1) Followers' sequential consistency w.r.t. to the leader
2) Session guarantees

(** Abstract predicates. *)
  we                  -- triplets (k, i, v) with key k, timestamp i, and value v, and time relation ≤ₜ on timestamps
  k ↦{q} Some we      -- abstract points-to connective ;
  Obs(a, h)           -- observered history h (list of events (k, i, v)) at a replica with address a;
  GlobalInv           -- global invariant; Obtained even before starting the leader (which is a bit subtle to handle followers dynamically).
  IsLeader(a)         -- a is the address of the leader. Duplicable, acquired at initialization of the client-leader proxy.
  ObsLeader(a, h)     == Obs(a, h) ∗ isLeader(a)


(** Operations on histories. *)
  at_key k0 h : option (nat * val) ≝ last (filter (λ we, we.k = k0) h)
  at_key_property1: ∀ h i k v, at_key k h = Some (i, v) → nth h i = Some (k,i,v))

(** Properties of points-to connective. *)
    OwnMemKey_timeless k q v     :> Timeless (k ↦ₖ{ q } v);
    OwnMemKey_exclusive k q v v' : k ↦ₖ{ 1 } v ⊢ k ↦ₖ{ q } v' -∗ False;
    OwnMemKey_fractioal k v      :> Fractional (λ q, k ↦ₖ{ q } v);
    OwnMemKey_as_fractioal k q v :> AsFractional (k ↦ₖ{ q } v) (λ q, k ↦ₖ{ q } v) q ;
    OwnMemKey_combine k q q' v v' : k ↦ₖ{ q } v ∗ k ↦ₖ{ q' } v' ⊢ k ↦ₖ{ q + q'} v ∗ ⌜v = v'⌝ ;
    OwnMemKey_split k q1 q2 v : k ↦ₖ{ q1 + q2 } v ⊢ k ↦ₖ{ q1 } v ∗ k ↦ₖ{ q2 } v ;

(** Properties of observed histories. *)
  Obs_linearizable :
    ∀ a1 a2 h1 h2 E, ↑DB_InvName ⊆ E → GlobalInv ⊢
      Obs(a1, h1) ∗ Obs(a2, h2) ={E}=∗ h1 ≤ₚ h2 ∨ h2 ≤ₚ h1
  Obs_get_smaller_at_node :
    ∀ a h h' E, nclose DB_InvName ⊆ E →
      h ≤ₚ h' → Obs(a, h') ={E}=∗ Obs(a, h);
  Obs_exists_at_leader :
    ∀ a1 a2 h1 E, ↑DB_InvName ⊆ E → GlobalInv ⊢
      Obs(a1, h1) ={E}=∗ ∃ h2, ObsLeader(a2, h2) ∗ h1 ≤ₚ h2
  Obs_snoc_time :
    ∀ a h1 e1 h2 E, nclose DB_InvName ⊆ E →
      Obs(a, h1 ++ [e1] ++ h2) ={E}=∗
      ⌜∀ e0, e0 ∈ h1 → e0 <ₜ e1⌝ ∧
      ⌜∀ e2, e2 ∈ h2 → e1 <ₜ e2⌝;
  Obs_global_ext_we :
    ∀ h h' E, nclose DB_InvName ⊆ E →
      GlobalInv ⊢ Obs(a, h) -∗ Obs (a', h') ={E}=∗
      ⌜∀ e e', e ∈ h → e' ∈ h' → e =ₜ e' → e = e'⌝;
  Obs_timeless    :> ∀ a h, Timeless Obs(a, h);
  Obs_persistent  :> ∀ a h, Persistent Obs(a, h);

(** Relations between points-to connective and observed requests *)
  OwnMemKey_obs_some_value_leader :
    ∀ a k q we E :
      nclose DB_InvName ⊆ E → GlobalInv ⊢
      k ↦ₖ{ q } Some we ={E}=∗
      k ↦ₖ{ q } Some we ∗ ∃ h, ObsLeader(a, h) ∗ ⌜at_key k h = Some we⌝;
  OwnMemKey_obs_none :
    ∀ a k q h E :
      nclose DB_InvName ⊆ E → GlobalInv ⊢
      k ↦ₖ{ q } None ∗ Obs(a, h) ={E}=∗
      k ↦ₖ{ q } None ∗ ⌜at_key k h = None⌝;
  OwnMemKey_obs_frame :
    ∀ a k q h h' E,
      nclose DB_InvName ⊆ E → GlobalInv ⊢
      h ≤ₚ h' →
      k ↦ₖ{ q } (at_key k h) ∗ Obs(a, h') ={E}=∗
      k ↦ₖ{ q } (at_key k h) ∗ ⌜at_key k h = at_key k h'⌝;
  OwnMemKey_obs_some_frame a k q we h hf E :
      nclose DB_InvName ⊆ E → GlobalInv ⊢
       k ↦ₖ{ q } (Some we) ∗ Obs(a, h ++ [we] ++ hf) ={E}=∗
       k ↦ₖ{ q } (Some we) ∗ ⌜at_key k hf = None⌝;
  OwnMemKey_allocated :
    ∀ k q h0 h1 we0 E :
      nclose DB_InvName ⊆ E → GlobalInv ⊢
      h0 ≤ₚ h1 →
      at_key k h0 = Some we0 →
      k ↦ₖ{ q } (at_key k h1) ={E}=∗
      ∃ we1, k ↦ₖ{ q } (at_key k h1) ∗
            ⌜at_key k h1 = Some we1⌝ ∗ ⌜we0 ≤ₜ we1⌝;

(** Specification for write. *)

{ k ∈ DB_keys ∗ k ↦{1} at_key(k, h) ∗ Obs(a0, h) }
   write(k, v) @[ca]
{ (), ∃ we hf, k ↦{1} Some we ∗ ObsLeader(a, h ++ hf ++ [we]) ∗ at_key(k, hf) = None }

The usual write spec is of course derivable:
        { k ∈ DB_keys ∗ k ↦{1} _ }
          write(k, v) @[ca]
        { (), k ↦{1} Some v }

NB: What about the logically atomic spec? Do we need it?

  Definition write_spec (sa : socket_address) : iProp Σ :=
    Eval simpl in
    □ (∀ (E : coPset) (k : Key) (v : SerializableVal)
         (P : iProp Σ) (Q : we → ghst → ghst → iProp Σ),
        ⌜↑DB_InvName ⊆ E⌝ -∗
        ⌜k ∈ DB_keys⌝ -∗
        □ (P
            ={⊤, E}=∗
              ∃ (h : ghst) (a_old: option we),
                ⌜at_key k h = a_old⌝ ∗
                Obs h ∗
                k ↦ₖ a_old ∗
                ▷ (∀ (hf : ghst) (a_new : we),
                  ⌜at_key k hf = None⌝ ∗
                  ⌜a_new.(WE_key) = k⌝ ∗ ⌜a_new.(WE_val) = v⌝ ∗
                  ⌜∀ e, e ∈ h → e <ₜ a_new⌝ ∗
                  k ↦ₖ Some a_new ∗
                  ObsLeader(UP_leader_addr, h ++ hf ++ [a_new]) ={E,⊤}=∗ Q a_new h hf)) -∗
        {{{ P }}}
          write #k v @[ip_of_address sa]
        {{{ RET #();
           ∃ (h hf : ghst) (a: we), Q a h hf }}})%I.

(** Specification for read at the leader node. *)

{ k ∈ DB_keys ∗ k ↦{q} we }
  read_L(k) @[ca]
{ (), k ↦{q} we }

NB: should also be atomic.

(** Specifications for read at the follower nodes. *)

(** Weak spec *)
{ k ∈ DB_keys ∗ Obs(fa, h) }
   read_F(k) @[ca]
{ vo, ∃ h', h ≤ₚ h' ∗ Obs(fa, h') ∗
  (vo = None ∗ at_key(k, h') = None ∨ ∃ we, vo = Some we ∗ at_key(k, h') = vo) }

NB: should also be atomic.


(* -------------------------------------------------------------------------- *)
(** An attempt for an alternative specs without timestamps. *)
(* -------------------------------------------------------------------------- *)
(** Operations on histories. *)
  at_key_at_time k0 h : option (nat * val) ≝
   match list_find (λ (k,v), k = k0) (list_reverse h) with
     | None -> None
     | Some (i, v) -> Some (length h - (i + 1), v)
  at_key k0 h : option val ≝
    match at_key_at_time k0 h with
      | None -> None
      | Some (i,v) -> Some v
    end
  at_key_def2 k0 h : option val ≝
    match last (filter (λ (k,v), k = k0) h) with
      | None -> None
      | Some (k,v) -> Some v
    end
  at_key_at_time_property1: ∀ h i k v, at_key_at_time k h = Some (i, v) → at_key k h = Some v ∧ nth h i = Some v
  at_key_at_time_property2: ∀ h k v, at_key k h = Some v -> ∃ i, at_key_at_time k h = Some (i, v)

(** Properties of points-to connective. *)
    OwnMemKey_timeless k q v     :> Timeless (k ↦ₖ{ q } v);
    OwnMemKey_exclusive k q v v' : k ↦ₖ{ 1 } v ⊢ k ↦ₖ{ q } v' -∗ False;
    OwnMemKey_fractioal k v      :> Fractional (λ q, k ↦ₖ{ q } v);
    OwnMemKey_as_fractioal k q v :> AsFractional (k ↦ₖ{ q } v) (λ q, k ↦ₖ{ q } v) q ;
    OwnMemKey_combine k q q' v v' : k ↦ₖ{ q } v ∗ k ↦ₖ{ q' } v' ⊢ k ↦ₖ{ q + q'} v ∗ ⌜v = v'⌝ ;
    OwnMemKey_split k q1 q2 v : k ↦ₖ{ q1 + q2 } v ⊢ k ↦ₖ{ q1 } v ∗ k ↦ₖ{ q2 } v ;

(** Properties of observed histories. *)
  Obs_linearizable :
    ∀ a1 a2 h1 h2 E, ↑DB_InvName ⊆ E → GlobalInv ⊢
      Obs(a1, h1) ∗ Obs(a2, h2) ={E}=∗ h1 ≤ₚ h2 ∨ h2 ≤ₚ h1
  Obs_lub_at_node :
    ∀ a h1 h2 E, nclose DB_InvName ⊆ E → GlobalInv ⊢
      Obs(a, h1) -∗ Obs (a, h2) ={E}=∗
      ∃ h3, ⌜h1 ≤ₚ h3⌝ ∗ ⌜h2 ≤ₚ h3⌝ ∗ Obs(a, h3);
  Obs_get_smaller_at_node :
    ∀ a h h' E, nclose DB_InvName ⊆ E →
      h ≤ₚ h' → Obs(a, h') ={E}=∗ Obs(a, h);
  Obs_exists_at_leader :
    ∀ a1 a2 h1 E, ↑DB_InvName ⊆ E → GlobalInv ⊢
      Obs(a1, h1) ={E}=∗ ∃ h2, ObsLeader(a2, h2) ∗ h1 ≤ₚ h2
  Obs_timeless    :> ∀ a h, Timeless Obs(a, h);
  Obs_persistent  :> ∀ a h, Persistent Obs(a, h);

(** Relations between points-to connective and observed requests *)
  OwnMemKey_obs_some_value :
    ∀ a k q v E :
      nclose DB_InvName ⊆ E →
      k ↦ₖ{ q } Some v ={E}=∗
      k ↦ₖ{ q } Some v ∗ ∃ h, ObsLeader(a, h) ∗ ⌜at_key k h = Some v⌝;
  OwnMemKey_obs_none :
    ∀ a k q h E :
      nclose DB_InvName ⊆ E →
      k ↦ₖ{ q } None ∗ Obs(a, h) ={E}=∗
      k ↦ₖ{ q } None ∗ ⌜at_key k h = None⌝;
  OwnMemKey_obs_frame_right :
    ∀ a k q h h' E,
      nclose DB_InvName ⊆ E →
      h ≤ₚ h' →
      k ↦ₖ{ q } (at_key k h) ∗ Obs(a, h') ={E}=∗
      k ↦ₖ{ q } (at_key k h) ∗ ⌜at_key k h = at_key k h'⌝;
  OwnMemKey_allocated :
     ∀ k q h0 h1 v0 v1 i0 i1 E :
      nclose DB_InvName ⊆ E →
      at_key_at_time k h0 = Some (i, v0) →
      h0 ≤ₚ h1 →
      k ↦ₖ{ q } (at_key k h1) ={E}=∗
      ∃ i1 v1, k ↦ₖ{ q } (at_key k h1) ∗ ⌜at_key_at_time k h1 = Some (i1, v1)⌝ ∗ ⌜i0 ≤ i1⌝;
  OwnMemKey_allocated :
     ∀ k q h0 h1 v0 v1 i0 i1 E :
      nclose DB_InvName ⊆ E →
      at_key_at_time k h0 = Some (i, v0) →
      h0 ≤ₚ h1 →
      k ↦ₖ{ q } (at_key k h1) ={E}=∗
      ∃ i1 v1, k ↦ₖ{ q } (at_key k h1) ∗
      ⌜at_key_at_time k h1 = Some (i1, (at_key k h1))⌝ ∗ ⌜i0 ≤ i1⌝;

(** Specifications. *)

{ k ∈ DB_keys ∗ k ↦{1} at_key(k, h) ∗ Obs(a, h) }
   write(k, v) @[ca]
{ (), ∃ hf, let h' = h ++ hf ++ [k,v] in
      k ↦{1} at_key(k, h') ∗, ObsLeader(a, h') ∗ at_key(k, hf) = None}

Derivable write specs:

        { k ∈ DB_keys ∗ k ↦{1} _ }
          write(k, v) @[ca]
        { (), k ↦{1} Some v ∗ ∃ h, ObsLeader(a, h ++ [k,v])}

        { k ∈ DB_keys ∗ k ↦{1} _ }
          write(k, v) @[ca]
        { (), k ↦{1} Some v }


{ k ∈ DB_keys ∗ k ↦{q} v }
  read_L(k) @[ca]
{ (), k ↦{q} v }

{ k ∈ DB_keys ∗ Obs(fa, h) }
   read_F(k) @[ca]
{ vo, ∃ h', h ≤ₚ h' ∗ Obs(fa, h') ∗
  (vo = None ∨ ∃ w, vo = Some w ∗ at_key(k, h') = vo) }
