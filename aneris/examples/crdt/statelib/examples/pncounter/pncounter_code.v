(* This file is automatically generated from the OCaml source file
<repository_root>/ml_sources/examples/crdt/statelib/examples/pncounter/pncounter_code.ml *)

From aneris.aneris_lang Require Import ast.
From aneris.aneris_lang.lib.serialization Require Import serialization_code.
From aneris.aneris_lang.lib Require Import list_code.
From aneris.aneris_lang.lib.vector_clock Require Import vector_clock_code.
From aneris.examples.crdt.statelib Require Import statelib_code.
From aneris.examples.crdt.statelib.examples.gcounter Require Import gcounter_code.
From aneris.examples.crdt.statelib.examples.prod_comb Require Import prod_comb_code.

(**  Step 1. Raw PN counter using product and gcpt crdts.  *)

Definition pn_cpt_init_st : val :=
  λ: "n" <>, prod_init_st (gcpt_init_st "n") (gcpt_init_st "n") #().

Definition pn_cpt_mutator : val :=
  λ: "i" "cpt" "op",
  let: "p" := Fst "op" in
  let: "n" := Snd "op" in
  assert: (((#0 = "p") && (#0 = "n")) || (((#0 < "p") && ("n" = #0)) ||
                                          ((#0 < "n") && ("p" = #0))));;
  prod_mutator gcpt_mutator gcpt_mutator "i" "cpt" "op".

Definition pn_cpt_merge : val :=
  λ: "st" "st'", prod_merge gcpt_merge gcpt_merge "st" "st'".

Definition pn_cpt_crdt : val :=
  λ: "n" <>, (pn_cpt_init_st "n", pn_cpt_mutator, pn_cpt_merge).

Definition pn_cpt_init : val :=
  λ: "addrs" "rid",
  let: "len" := list_length "addrs" in
  let: "initRes" := statelib_init (prod_ser vect_serialize vect_serialize)
                    (prod_deser vect_deserialize vect_deserialize) "addrs"
                    "rid" (pn_cpt_crdt "len") in
  let: "get_state" := Fst "initRes" in
  let: "update" := Snd "initRes" in
  ("get_state", "update").

(**  Step 2. PN counter wrapper.  *)

Definition list_int_sum : val :=
  λ: "l", list_fold (λ: "acc" "n", "acc" + "n") #0 "l".

Definition pncounter_update : val :=
  λ: "upd" "n",
  (if: #0 ≤ "n"
   then  "upd" ("n", #0)
   else  "upd" (#0, (- "n"))).

Definition pncounter_eval : val :=
  λ: "get_state" <>,
  let: "st" := "get_state" #() in
  let: "pl" := Fst "st" in
  let: "nl" := Snd "st" in
  let: "p" := list_int_sum "pl" in
  let: "n" := list_int_sum "nl" in
  "p" - "n".

Definition pncounter_init : val :=
  λ: "addrs" "rid",
  let: "pn_cpt" := pn_cpt_init "addrs" "rid" in
  let: "get_st" := Fst "pn_cpt" in
  let: "upd_st" := Snd "pn_cpt" in
  let: "get" := pncounter_eval "get_st" in
  let: "upd" := pncounter_update "upd_st" in
  ("get", "upd").
