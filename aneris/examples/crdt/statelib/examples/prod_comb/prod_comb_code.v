(* This file is automatically generated from the OCaml source file
<repository_root>/ml_sources/examples/crdt/statelib/examples/prod_comb/prod_comb_code.ml *)

From aneris.aneris_lang Require Import ast.
From aneris.aneris_lang.lib.serialization Require Import serialization_code.
From aneris.aneris_lang.lib Require Import list_code.
From aneris.examples.crdt.statelib Require Import statelib_code.

Definition prod_init_st : val :=
  λ: "init_fnA" "init_fnB" <>, ("init_fnA" #(), "init_fnB" #()).

Definition prod_mutator : val :=
  λ: "mut_fnA" "mut_fnB" "i" "gs" "op",
  let: "gsA" := Fst "gs" in
  let: "gsB" := Snd "gs" in
  let: "opA" := Fst "op" in
  let: "opB" := Snd "op" in
  ("mut_fnA" "i" "gsA" "opA", "mut_fnB" "i" "gsB" "opB").

Definition prod_merge : val :=
  λ: "merge_fnA" "merge_fnB" "st1" "st2",
  let: "st11" := Fst "st1" in
  let: "st12" := Snd "st1" in
  let: "st21" := Fst "st2" in
  let: "st22" := Snd "st2" in
  let: "mA" := "merge_fnA" "st11" "st21" in
  let: "mB" := "merge_fnB" "st12" "st22" in
  ("mA", "mB").

Definition prod_crdt (cA : val) (cB : val) : val :=
  λ: <>,
  let: "cAp" := cA #() in
  let: "cBp" := cB #() in
  let: "init_fnA" := Fst (Fst "cAp") in
  let: "mut_fnA" := Snd (Fst "cAp") in
  let: "merge_fnA" := Snd "cAp" in
  let: "init_fnB" := Fst (Fst "cBp") in
  let: "mut_fnB" := Snd (Fst "cBp") in
  let: "merge_fnB" := Snd "cBp" in
  let: "init_fn" := λ: <>,
  prod_init_st "init_fnA" "init_fnB" #() in
  let: "mut_fn" := λ: "i" "gs" "op",
  prod_mutator "mut_fnA" "mut_fnB" "i" "gs" "op" in
  let: "merge_fn" := λ: "st1" "st2",
  prod_merge "merge_fnA" "merge_fnB" "st1" "st2" in
  ("init_fn", "mut_fn", "merge_fn").

Definition prod_init (stA_ser : val) (stA_deser : val) (stB_ser : val)
                     (stB_deser : val) (cA : val) (cB : val) : val :=
  λ: "addrs" "rid",
  let: "initRes" := statelib_init (prod_ser stA_ser stB_ser)
                    (prod_deser stA_deser stB_deser) "addrs" "rid"
                    (λ: <>, prod_crdt cA cB #()) in
  let: "get_state" := Fst "initRes" in
  let: "update" := Snd "initRes" in
  ("get_state", "update").
