(* This file is automatically generated from the OCaml source file
<repository_root>/ml_sources/examples/crdt/statelib/statelib_code.ml *)

From aneris.aneris_lang Require Import ast.
From aneris.aneris_lang.lib Require Import list_code.
From aneris.aneris_lang.lib Require Import network_util_code.

Definition get_state : val :=
  λ: "lock" "st" <>,
  acquire "lock";;
  let: "res" := ! "st" in
  release "lock";;
  "res".

Definition loop_forever : val :=
  rec: "loop_forever" "thunk" := "thunk" #();;
                                 "loop_forever" "thunk".

Definition apply deser_st : val :=
  λ: "lk" "sh" "st" "merge",
  loop_forever (λ: <>,
                acquire "lk";;
                let: "msg" := unSOME (ReceiveFrom "sh") in
                let: "st'" := deser_st (Fst "msg") in
                "st" <- ("merge" ! "st" "st'");;
                release "lk").

Definition update : val :=
  λ: "lk" "mut" "st" "op" "i",
  acquire "lk";;
  "st" <- ("mut" "i" ! "st" "op");;
  release "lk".

Definition sendToAll : val :=
  λ: "sh" "msg" "dstl" "i",
  letrec: "aux" "j" :=
    (if: "j" < (list_length "dstl")
     then
       (if: "i" = "j"
       then  "aux" ("j" + #1)
       else
         let: "dst" := unSOME (list_nth "dstl" "j") in
         SendTo "sh" "msg" "dst";;
         #();;
         "aux" ("j" + #1))
     else  #()) in
    "aux" #0.

Definition broadcast (ser_st : val) : val :=
  λ: "lk" "sh" "st" "dstl" "i",
  letrec: "loop" <> :=
    #() (* unsafe (fun () -> Unix.sleepf 2.0); *);;
    acquire "lk";;
    let: "s" := ! "st" in
    release "lk";;
    let: "msg" := ser_st "s" in
    sendToAll "sh" "msg" "dstl" "i";;
    "loop" #() in
    "loop" #().

Definition statelib_init (st_ser : val) (st_deser : val) : val :=
  λ: "addrlst" "rid" "crdt",
  let: "init_st" := Fst (Fst "crdt") in
  let: "mut" := Snd (Fst "crdt") in
  let: "merge" := Snd "crdt" in
  let: "st" := ref "init_st" in
  let: "lk" := newlock #() in
  let: "sh" := NewSocket #() in
  let: "addr" := unSOME (list_nth "addrlst" "rid") in
  SocketBind "sh" "addr";;
  Fork (apply st_deser "lk" "sh" "st" "merge");;
  Fork (broadcast st_ser "lk" "sh" "st" "addrlst" "rid");;
  let: "get" := get_state "lk" "st" in
  let: "upd" := update "lk" "mut" "st" "rid" in
  ("get", "upd").
