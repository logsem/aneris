(* This file is automatically generated from the OCaml source file
<repository_root>/ml_sources/examples/consensus/paxos_code.ml *)

From aneris.aneris_lang Require Import ast.
From aneris.aneris_lang.lib Require Import list_code.
From aneris.aneris_lang.lib Require Import set_code.
From aneris.aneris_lang.lib Require Import map_code.
From aneris.aneris_lang.lib Require Import network_util_code.
From aneris.aneris_lang.lib.serialization Require Import serialization_code.

Definition ballot_serializer := int_serializer.

Definition acceptor_serializer value_serializer :=
  sum_serializer ballot_serializer
  (prod_serializer ballot_serializer value_serializer).

Definition proposer_serializer value_serializer :=
  prod_serializer ballot_serializer
  (option_serializer (prod_serializer ballot_serializer value_serializer)).

Definition learner_serializer value_serializer :=
  prod_serializer ballot_serializer value_serializer.

Definition client_serializer value_serializer :=
  prod_serializer ballot_serializer value_serializer.

Definition acceptor valS : val :=
  λ: "learners" "addr",
  let: "skt" := NewSocket #() in
  SocketBind "skt" "addr";;
  let: "maxBal" := ref NONE in
  let: "maxVal" := ref NONE in
  letrec: "loop" <> :=
    let: "msg" := unSOME (ReceiveFrom "skt") in
    let: "m" := Fst "msg" in
    let: "sender" := Snd "msg" in
    match: (acceptor_serializer valS).(s_deser) "m" with
      InjL "bal" =>
      let: "b" := ! "maxBal" in
      (if: ("b" = NONE) || ((unSOME "b") < "bal")
       then
         "maxBal" <- (SOME "bal");;
         SendTo "skt" ((proposer_serializer valS).(s_ser) ("bal", ! "maxVal")) "sender";;
         #()
       else  #())
    | InjR "accept" =>
        let: "bal" := Fst "accept" in
        let: "_v" := Snd "accept" in
        let: "b" := ! "maxBal" in
        (if: ("b" = NONE) || ((unSOME "b") ≤ "bal")
         then
           "maxBal" <- (SOME "bal");;
           "maxVal" <- (SOME "accept");;
           sendto_all_set "skt" "learners"
           ((learner_serializer valS).(s_ser) "accept");;
           #()
         else  #())
    end;;
    "loop" #() in
    "loop" #().

Definition recv_promises valS : val :=
  λ: "skt" "n" "bal",
  let: "promises" := ref (set_empty #()) in
  let: "senders" := ref (set_empty #()) in
  letrec: "loop" <> :=
    (if: (set_cardinal ! "senders") = "n"
     then  ! "promises"
     else
       let: "msg" := unSOME (ReceiveFrom "skt") in
       let: "promise" := (proposer_serializer valS).(s_deser) (Fst "msg") in
       let: "sender" := Snd "msg" in
       let: "bal'" := Fst "promise" in
       let: "mval" := Snd "promise" in
       (if: "bal" = "bal'"
        then
          "senders" <- (set_add "sender" ! "senders");;
          "promises" <- (set_add "mval" ! "promises")
        else  #());;
       "loop" #()) in
    "loop" #().

Definition find_max_promise : val :=
  λ: "l",
  set_foldl (λ: "acc" "promise",
             match: "promise" with
               SOME "p" =>
               match: "acc" with
                 SOME "a" =>
                 let: "b1" := Fst "p" in
                 let: "b2" := Fst "a" in
                 (if: "b1" < "b2"
                  then  "acc"
                  else  "promise")
               | NONE => "promise"
               end
             | NONE => "acc"
             end)
  NONE "l".

Definition proposer valS : val :=
  λ: "acceptors" "skt" "bal" "v",
  sendto_all_set "skt" "acceptors"
  ((acceptor_serializer valS).(s_ser) (InjL "bal"));;
  let: "majority_size" := ((set_cardinal "acceptors") `quot` #2) + #1 in
  let: "promises" := recv_promises valS "skt" "majority_size" "bal" in
  let: "max_promise" := find_max_promise "promises" in
  let: "accept_value" := match: "max_promise" with
    SOME "p" => Snd "p"
  | NONE => "v"
  end in
  sendto_all_set "skt" "acceptors"
  ((acceptor_serializer valS).(s_ser) (InjR ("bal", "accept_value"))).

Definition proposer' valS : val :=
  λ: "acceptors" "addr" "i" "n" "v",
  let: "skt" := NewSocket #() in
  SocketBind "skt" "addr";;
  let: "ballot_counter" := ref #0 in
  letrec: "loop" <> :=
    let: "ballot" := (! "ballot_counter" * "n") + "i" in
    proposer valS "acceptors" "skt" "ballot" "v";;
    "ballot_counter" <- (! "ballot_counter" + #1);;
    "loop" #() in
    "loop" #().

Definition learner valS : val :=
  λ: "skt" "acceptors",
  let: "majority_size" := ((set_cardinal "acceptors") `quot` #2) + #1 in
  let: "votes_ref" := ref (map_empty #()) in
  letrec: "loop" <> :=
    let: "msg" := unSOME (ReceiveFrom "skt") in
    let: "vote" := (learner_serializer valS).(s_deser) (Fst "msg") in
    let: "bal" := Fst "vote" in
    let: "value" := Snd "vote" in
    let: "sender" := Snd "msg" in
    let: "votes" := ! "votes_ref" in
    let: "bal_votes" := match: map_lookup "bal" "votes" with
      SOME "vs" => "vs"
    | NONE => set_empty #()
    end in
    let: "bal_votes'" := set_add "sender" "bal_votes" in
    (if: (set_cardinal "bal_votes'") = "majority_size"
     then  ("bal", "value")
     else
       "votes_ref" <- (map_insert "bal" "bal_votes'" "votes");;
       "loop" #()) in
    "loop" #().

Definition learner' valS : val :=
  λ: "acceptors" "addr" "client",
  let: "skt" := NewSocket #() in
  SocketBind "skt" "addr";;
  let: "z" := learner valS "skt" "acceptors" in
  SendTo "skt" ((client_serializer valS).(s_ser) "z") "client".

Definition client valS : val :=
  λ: "addr",
  let: "skt" := NewSocket #() in
  SocketBind "skt" "addr";;
  let: "msg1" := unSOME (ReceiveFrom "skt") in
  let: "sender1" := Snd "msg1" in
  let: "m1" := (client_serializer valS).(s_deser) (Fst "msg1") in
  let: "val1" := Snd "m1" in
  let: "msg2" := wait_receivefrom "skt" (λ: "m", ~ ((Snd "m") = "sender1")) in
  let: "m2" := (client_serializer valS).(s_deser) (Fst "msg2") in
  let: "val2" := Snd "m2" in
  assert: ("val1" = "val2");;
  "val1".
